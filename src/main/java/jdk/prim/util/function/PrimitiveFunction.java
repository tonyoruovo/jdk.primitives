
package jdk.prim.util.function;

import java.util.function.DoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.UnaryOperator;

/**
 * <p>
 * An interface that is generally an extension of the {@code Function}
 * interface for primitive values. These include:
 * <ol>
 * <li>{@code double} extended as {@link ToDouble} the specialised function
 * being {@link ToDouble#applyDouble}.</li>
 * <li>{@code long} extended as {@link ToLong} the specialised function being
 * {@link ToLong#applyLong}.</li>
 * <li>{@code int} extended as {@link ToInt} the specialised function being
 * {@link ToInt#applyInt}.</li>
 * <li>{@code float} extended as {@link ToFloat} the specialised function being
 * {@link ToFloat#applyFloat}.</li>
 * <li>{@code char} extended as {@link ToChar} the specialised function being
 * {@link ToChar#applyChar}.</li>
 * <li>{@code short} extended as {@link ToShort} the specialised function being
 * {@link ToShort#applyShort}.</li>
 * <li>{@code byte} extended as {@link ToByte} the specialised function being
 * {@link ToByte#applyByte}.</li>
 * <li>{@code boolean} extended as {@link ToBoolean} the specialised function
 * being {@link ToBoolean#applyBoolean}.</li>
 * </ol>
 * And additional interfaces (labeled as {@code OfXxx}) with their to cover for when the return
 * type is not a primitive (such as a {@code StringBuilder}), but the
 * argument is.
 * <p>
 * It contains (amongst other things) definitions for sub-interfaces that
 * specialise the {@link #apply} as
 * {@code applyXxx} function where {@code Xxx} is a suffix for that primitive in
 * which the interface specialises.
 * It also contains a suite of methods (which nested sub-interface override for
 * specialised implementations) that
 * define primitive alternatives for {@link #andThen(Function)}.
 * <p>
 * It uses the following convention: <code>To*</code> refers to the return type,
 * {@code Of*} refers to the first argument. When they are nested then the
 * convention remains mostly the same.
 * <p>
 * The point of this interface (and it's subsequent nested sub-interfaces) is to
 * cover all use cases for {@code Function} with Java's primitives, while
 * providing
 * the opportunity for possible integration of with current JDK implementations
 * such as:
 * <ul>
 * <li>{@link UnaryOperator}</li>
 * <li>{@link DoubleUnaryOperator}</li>
 * <li>{@link ToDoubleFunction}</li>
 * <li>{@link LongToDoubleOperator}</li>
 * <li>{@link IntToDoubleOperator}</li>
 * <li>{@link LongUnaryOperator}</li>
 * <li>{@link ToLongFunction}</li>
 * <li>{@link DoubleToLongOperator}</li>
 * <li>{@link IntToLongOperator}</li>
 * <li>{@link IntUnaryOperator}</li>
 * <li>{@link ToIntFunction}</li>
 * <li>{@link DoubleToIntOperator}</li>
 * <li>{@link LongToIntOperator}</li>
 * </ul>
 * 
 * @param <TO> the return value of {@link #apply(Object)}
 * @param <OF> the argument of {@link #apply(Object)}
 */
@FunctionalInterface
public interface PrimitiveFunction<TO, OF> extends Function<OF, TO> {

    /**
     * A {@code Function} that returns a {@code double} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyDouble} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>make retrofitting {@code Function} with {@code double} based interfaces
     * possible.
     * <p>
     * This is apparent by the fact that all similar interface(s) within the
     * primitive-{@code double}-{@code Function}
     * are extended. For example this class extends {@code ToDoubleFunction} to
     * provide legacy code with the option
     * of retrofitting their implementation(s) with this one, for instance, the
     * following snippet is from a library in which
     * we had no control over how code was written:
     * 
     * <pre>{@code
     * public interface LegacyInterface&lt;T&gt; {
     *     ToDoubleFunction&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * But we can re-implement the above, retrofitting it with our primitive
     * {@code double} equivalent:
     * 
     * <pre>{@code
     * public interface MyInterface&lt;T&gt; extends LegacyInterface&lt;T&gt; {
     *     PrimitiveFunction.ToDouble&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * </li>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code double} functions and functions.
     * An Example of this is:
     * 
     * <pre>{@code
     * java.util.function.ToDoubleFunction<String> f = Double::parseDouble; // The JDK's interface for Function that
     *                                                                      // returns a double
     * PrimitiveFunction.ToDouble<String> g = Double::parseDouble; // the same as the above but with improved naming and
     *                                                             // functionalities
     * }</pre>
     * 
     * Another example would be the {@code DoubleUnaryOperator} interface:
     * 
     * <pre>{@code
     * java.util.function.DoubleUnaryOperator f = Math::sin; // The JDK's interface
     * PrimitiveFunction.ToDouble.OfDouble g = Math::sin; // the same as the above but with improved naming and
     *                                                    // functionalities
     * }</pre>
     * 
     * </li>
     * <li>cover all areas where primitive {@code double} would be needed when
     * working with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Double}) when the primitive
     * {@code double} was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToDouble.OfLong f = Double::longBitsToDouble;
     * PrimitiveConsumer.OfDouble c = System.out::println;
     * c.acceptDouble(f.applyDouble(123456709863L));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code double} and taking a {@code double}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * Note that this is not meant to replace the primitive {@code double}
     * {@code Function} implementations, however, this is meant to complement them
     * by subclassing both {@code Function} and it's primitive {@code double}
     * counterpart, providing an harmony (a sort of bridge) between the 2 apis.
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyDouble} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Double} to the
     *           primitive
     *           {@code double} as it's return type.
     */
    @FunctionalInterface
    interface ToDouble<OF> extends PrimitiveFunction<java.lang.Double, OF>, ToDoubleFunction<OF> {
        /**
         * Applies this function to the given arguments, returning a {@code double}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a
         * {@code double}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code double} result of applying both arguments
         */
        double applyDouble(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Double> after) {
            return x -> after.applyDouble(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Double> after) {
            return x -> after.applyLong(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Double> after) {
            return x -> after.applyInt(applyDouble(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Double> after) {
            return x -> after.applyFloat(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Double> after) {
            return x -> after.applyChar(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Double> after) {
            return x -> after.applyShort(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Double> after) {
            return x -> after.applyByte(applyDouble(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyDouble(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Double} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Double> after) {
            return x -> after.applyBoolean(applyDouble(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToDouble<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToDouble<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToDouble<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToDouble<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToDouble<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToDouble<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyDouble(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code double}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToDouble<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyDouble(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyDouble}, and returns that boxed result.
         */
        @Override
        default java.lang.Double apply(OF x) {
            return applyDouble(x);
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @apiNote Semantically the same as calling {@link #applyDouble(Object)}
         */
        @Override
        default double applyAsDouble(OF x) {
            return applyDouble(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfDouble extends ToDouble<java.lang.Double>, DoubleUnaryOperator, UnaryOperator<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(double x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(double) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyDouble(before.applyDouble(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(double)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Double x) {
                return applyDouble((double) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyDouble(double)}
             */
            @Override
            default double applyAsDouble(double x) {
                return applyDouble((double) x);
            }
        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfLong extends ToDouble<java.lang.Long>, LongToDoubleFunction {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(long x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(double) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyDouble(before.applyLong(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyDouble(long)}
             */
            @Override
            default double applyAsDouble(long x) {
                return applyDouble(x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(long)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Long x) {
                return applyDouble((long) x);
            }
        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfInt extends ToDouble<java.lang.Integer>, IntToDoubleFunction {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(int x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(double) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyDouble(before.applyInt(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyDouble(int)}
             */
            @Override
            default double applyAsDouble(int x) {
                return applyDouble(x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(int)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Integer x) {
                return applyDouble((int) x);
            }
        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfFloat extends ToDouble<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(float x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyDouble(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(float)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Float x) {
                return applyDouble((float) x);
            }
        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfChar extends ToDouble<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(char x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(double) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyDouble(before.applyChar(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(char)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Character x) {
                return applyDouble((char) x);
            }
        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfShort extends ToDouble<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(short x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyDouble(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(short)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Short x) {
                return applyDouble((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfByte extends ToDouble<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(byte x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(double) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(double) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(double) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(double) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(double) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(double) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(double) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyDouble(before.applyByte(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(byte)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Byte x) {
                return applyDouble((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code double}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToDouble<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code double}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code double}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code double} result of applying the argument
             */
            double applyDouble(boolean x);

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToDouble.OfDouble#apDouble(double)yte.applyBDoublent}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenDouble(ToDouble)}
             * @see ToDouble#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfDouble after) {
                return x -> after.applyDouble(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToLong.OfDouble#apLong(double)yte.applyBooIntLong
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenLong(ToLong)}
             * @see ToDouble#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfDouble after) {
                return x -> after.applyLong(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToInt.OfDouble#apInt(double)yte.applyBooInt}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenInt(ToInt)}
             * @see ToDouble#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfDouble after) {
                return x -> after.applyInt(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToFloat.OfDouble#apFloat(double)yte.applyBooFloat}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenFloat(ToFloat)}
             * @see ToDouble#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfDouble after) {
                return x -> after.applyFloat(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToChar.OfDouble#apChar(double)yte.applyBooChar}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenChar(ToChar)}
             * @see ToDouble#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfDouble after) {
                return x -> after.applyChar(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToShort.OfDouble#apShort(double)yte.applyBooShort}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenShort(ToShort)}
             * @see ToDouble#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfDouble after) {
                return x -> after.applyShort(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#appyte(double)yte.applyBoolean}
     yte* whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenByte(ToByte)}
             * @see ToDouble#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfDouble after) {
                return x -> after.applyByte(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyDouble(double)} and then using it's {@code double} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(double) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code double} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToDouble#andThenBoolean(ToBoolean)}
             * @see ToDouble#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfDouble after) {
                return x -> after.applyBoolean(applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToDouble#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToDouble.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeLong(PrimitiveFunction.OfLong)}
             * @see ToDouble#composeLong(PrimitiveFunction.OfLong)
             */
            default ToDouble.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeInt(PrimitiveFunction.OfInt)}
             * @see ToDouble#composeInt(PrimitiveFunction.OfInt)
             */
            default ToDouble.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToDouble#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToDouble.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeChar(PrimitiveFunction.OfChar)}
             * @see ToDouble#composeChar(PrimitiveFunction.OfChar)
             */
            default ToDouble.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeShort(PrimitiveFunction.OfShort)}
             * @see ToDouble#composeShort(PrimitiveFunction.OfShort)
             */
            default ToDouble.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeByte(PrimitiveFunction.OfByte)}
             * @see ToDouble#composeByte(PrimitiveFunction.OfByte)
             */
            default ToDouble.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns a {@code double} result.
             * @apiNote This is the most specialised version of
             * {@link ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToDouble#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToDouble.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyDouble(before.applyBoolean(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyDouble(boolean)}, and returns that boxed result.
             */
            @Override
            default double applyDouble(java.lang.Boolean x) {
                return applyDouble((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code long} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyLong} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>make retrofitting {@code Function} with {@code long} based interfaces
     * possible.
     * <p>
     * This is apparent by the fact that all similar interface(s) within the
     * primitive-{@code long}-{@code Function}
     * are extended. For example this class extends {@code ToLongFunction} to
     * provide legacy code with the option
     * of retrofitting their implementation(s) with this one, for instance, the
     * following snippet is from a library in which
     * we had no control over how code was written:
     * 
     * <pre>{@code
     * public interface LegacyInterface&lt;T&gt; {
     *     ToLongFunction&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * But we can re-implement the above, retrofitting it with our primitive
     * {@code long} equivalent:
     * 
     * <pre>{@code
     * public interface MyInterface&lt;T&gt; extends LegacyInterface&lt;T&gt; {
     *     PrimitiveFunction.ToLong&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * </li>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code long} functions and functions.
     * An Example of this is:
     * 
     * <pre>{@code
     * java.util.function.ToLongFunction<String> f = Long::parseLong; // The JDK's interface for Function that returns a
     *                                                                // long
     * PrimitiveFunction.ToLong<String> g = Long::parseLong; // the same as the above but with improved naming and
     *                                                       // functionalities
     * }</pre>
     * 
     * Another example would be the {@code LongUnaryOperator} interface:
     * 
     * <pre>{@code
     * java.util.function.LongUnaryOperator f = Math::sin; // The JDK's interface
     * PrimitiveFunction.ToLong.OfLong g = Math::sin; // the same as the above but with improved naming and
     *                                                // functionalities
     * }</pre>
     * 
     * </li>
     * <li>cover all areas where primitive {@code long} would be needed when working
     * with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Long}) when the primitive {@code long}
     * was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToLong.OfInt f = Integer::toUnsignedLong;
     * PrimitiveConsumer.OfLong c = System.out::println;
     * c.acceptLong(f.applyLong(-12345670));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code long} and taking a {@code int}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * Note that this is not meant to replace the primitive {@code long}
     * {@code Function} implementations, however, this is meant to complement them
     * by subclassing both {@code Function} and it's primitive {@code long}
     * counterpart, providing an harmony (a sort of bridge) between the 2 apis.
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyLong} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Long} to the
     *           primitive
     *           {@code long} as it's return type.
     */
    @FunctionalInterface
    interface ToLong<OF> extends PrimitiveFunction<java.lang.Long, OF>, ToLongFunction<OF> {
        /**
         * Applies this function to the given arguments, returning a {@code long}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a {@code long}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code long} result of applying both arguments
         */
        long applyLong(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Long> after) {
            return x -> after.applyDouble(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Long> after) {
            return x -> after.applyLong(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Long> after) {
            return x -> after.applyInt(applyLong(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Long> after) {
            return x -> after.applyFloat(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Long> after) {
            return x -> after.applyChar(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Long> after) {
            return x -> after.applyShort(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Long> after) {
            return x -> after.applyByte(applyLong(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyLong(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Long} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Long> after) {
            return x -> after.applyBoolean(applyLong(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToLong<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToLong<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToLong<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToLong<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToLong<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToLong<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyLong(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code long}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToLong<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyLong(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyLong}, and returns that boxed result.
         */
        @Override
        default java.lang.Long apply(OF x) {
            return applyLong(x);
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @apiNote Semantically the same as calling {@link #applyLong(long)}
         */
        @Override
        default long applyAsLong(OF x) {
            return applyLong(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfDouble extends ToLong<java.lang.Double>, DoubleToLongFunction {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyLong(before.applyDouble(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(double)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Double x) {
                return applyLong((double) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyLong(double)}
             */
            @Override
            default long applyAsLong(double x) {
                return applyLong((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfLong extends ToLong<java.lang.Long>, LongUnaryOperator, UnaryOperator<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyLong(before.applyLong(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(long)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Long x) {
                return applyLong((long) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyLong(long)}
             */
            @Override
            default long applyAsLong(long x) {
                return applyLong((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfInt extends ToLong<java.lang.Integer>, IntToLongFunction {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyLong(before.applyInt(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(int)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Integer x) {
                return applyLong((int) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyLong(int)}
             */
            @Override
            default long applyAsLong(int x) {
                return applyLong((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfFloat extends ToLong<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@codLong this} and the argument. The compolong consists
             * of calling {@link #applyDouble(double)} and then using it's {@long double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyLong(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyLong(before.applyFloat(x));
            }


            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(float)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Float x) {
                return applyLong((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfChar extends ToLong<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyLong(before.applyChar(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(char)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Character x) {
                return applyLong((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfShort extends ToLong<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@codLong this} and the argument. The compolong consists
             * of calling {@link #applyDouble(double)} and then using it's {@long double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyLong(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyLong(before.applyShort(x));
            }


            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(short)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Short x) {
                return applyLong((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfByte extends ToLong<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyLong(before.applyByte(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(byte)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Byte x) {
                return applyLong((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code long}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToLong<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code long} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code long}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code long} result of applying the argument
             */
            long applyLong(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code long} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(long) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenDouble(ToDouble)}
             * @see ToLong#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfLong after) {
                return x -> after.applyDouble(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(long) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenLong(ToLong)}
             * @see ToLong#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfLong after) {
                return x -> after.applyLong(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {longcode double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(long) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenInt(ToInt)}
             * @see ToLong#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfLong after) {
                return x -> after.applyInt(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(long) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenFloat(ToFloat)}
             * @see ToLong#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfLong after) {
                return x -> after.applyFloat(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@clong double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(long) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenChar(ToChar)}
             * @see ToLong#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfLong after) {
                return x -> after.applyChar(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codlong double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(long) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenShort(ToShort)}
             * @see ToLong#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfLong after) {
                return x -> after.applyShort(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@codelong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyByte(long) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenByte(ToByte)}
             * @see ToLong#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfLong after) {
                return x -> after.applyByte(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyLong(double)} and then using it's {@code dolong} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(long) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code long} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToLong#andThenBoolean(ToBoolean)}
             * @see ToLong#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfLong after) {
                return x -> after.applyBoolean(applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToLong#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToLong.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeLong(PrimitiveFunction.OfLong)}
             * @see ToLong#composeLong(PrimitiveFunction.OfLong)
             */
            default ToLong.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeInt(PrimitiveFunction.OfInt)}
             * @see ToLong#composeInt(PrimitiveFunction.OfInt)
             */
            default ToLong.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToLong#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToLong.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeChar(PrimitiveFunction.OfChar)}
             * @see ToLong#composeChar(PrimitiveFunction.OfChar)
             */
            default ToLong.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeShort(PrimitiveFunction.OfShort)}
             * @see ToLong#composeShort(PrimitiveFunction.OfShort)
             */
            default ToLong.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeByte(PrimitiveFunction.OfByte)}
             * @see ToLong#composeByte(PrimitiveFunction.OfByte)
             */
            default ToLong.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns a {@code long} result.
             * @apiNote This is the most specialised version of
             * {@link ToLong#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToLong#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToLong.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyLong(before.applyBoolean(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyLong(boolean)}, and returns that boxed result.
             */
            @Override
            default long applyLong(java.lang.Boolean x) {
                return applyLong((boolean) x);
            }

        }

    }

    /**
     * A {@code Function} that returns a {@code int} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyInt} whereby the latter
     * gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>make retrofitting {@code Function} with {@code int} based interfaces
     * possible.
     * <p>
     * This is apparent by the fact that all similar interface(s) within the
     * primitive-{@code int}-{@code Function}
     * are extended. For example this class extends {@code ToIntFunction} to provide
     * legacy code with the option
     * of retrofitting their implementation(s) with this one, for instance, the
     * following snippet is from a library in which
     * we had no control over how code was written:
     * 
     * <pre>{@code
     * public interface LegacyInterface&lt;T&gt; {
     *     ToIntFunction&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * But we can re-implement the above, retrofitting it with our primitive
     * {@code int} equivalent:
     * 
     * <pre>{@code
     * public interface MyInterface&lt;T&gt; extends LegacyInterface&lt;T&gt; {
     *     PrimitiveFunction.ToInt&lt;T&gt; apiMethod();
     * }
     * }</pre>
     * 
     * </li>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code int} functions and functions.
     * An Example of this is:
     * 
     * <pre>{@code
     * java.util.function.ToIntFunction<String> f = Integer::parseInt; // The JDK's interface for Function that returns
     *                                                                 // an int
     * PrimitiveFunction.ToInt<String> g = Integer::parseInt; // the same as the above but with improved naming and
     *                                                        // functionalities
     * }</pre>
     * 
     * Another example would be the {@code IntUnaryOperator} interface:
     * 
     * <pre>{@code
     * java.util.function.IntUnaryOperator f = Math::sin; // The JDK's interface
     * PrimitiveFunction.ToInt.OfInt g = Math::sin; // the same as the above but with improved naming and
     *                                              // functionalities
     * }</pre>
     * 
     * </li>
     * <li>cover all areas where primitive {@code int} would be needed when working
     * with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Integer}) when the primitive {@code int}
     * was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToInt.OfLong f = Long::numberOfTrailingZeros;
     * PrimitiveConsumer.OfInt c = System.out::println;
     * c.acceptInt(f.applyInt(67044));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code int} and taking a {@code long}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * Note that this is not meant to replace the primitive {@code int}
     * {@code Function} implementations, however, this is meant to complement them
     * by subclassing both {@code Function} and it's primitive {@code int}
     * counterpart, providing an harmony (a sort of bridge) between the 2 apis.
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyInt} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Integer} to the
     *           primitive
     *           {@code int} as it's return type.
     */
    @FunctionalInterface
    interface ToInt<OF> extends PrimitiveFunction<java.lang.Integer, OF>, ToIntFunction<OF> {
        /**
         * Applies this function to the given arguments, returning a {@code int} result.
         * <p>
         * This is a specialised version of {@link #apply} that returns an {@code int}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code int} result of applying both arguments
         */
        int applyInt(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Integer> after) {
            return x -> after.applyDouble(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Integer> after) {
            return x -> after.applyLong(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Integer> after) {
            return x -> after.applyInt(applyInt(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Integer> after) {
            return x -> after.applyFloat(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Integer> after) {
            return x -> after.applyChar(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Integer> after) {
            return x -> after.applyShort(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Integer> after) {
            return x -> after.applyByte(applyInt(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyInt(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Int} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Integer> after) {
            return x -> after.applyBoolean(applyInt(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToInt<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToInt<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToInt<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToInt<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToInt<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToInt<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyInt(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code int}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToInt<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyInt(before.apply(x));
        }
        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyInt}, and returns that boxed result.
         */
        @Override
        default java.lang.Integer apply(OF x) {
            return applyInt(x);
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @apiNote Semantically the same as calling {@link #applyInt(long)}
         */
        @Override
        default int applyAsInt(OF x) {
            return applyInt(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfDouble extends ToInt<java.lang.Double>, DoubleToIntFunction {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyInt(before.applyDouble(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(int)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Double x) {
                return applyInt((double) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyInt(int)}
             */
            @Override
            default int applyAsInt(double x) {
                return applyInt((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfLong extends ToInt<java.lang.Long>, LongToIntFunction {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyInt(before.applyLong(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(long)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Long x) {
                return applyInt((long) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyInt(long)}
             */
            @Override
            default int applyAsInt(long x) {
                return applyInt((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfInt extends ToInt<java.lang.Integer>, IntUnaryOperator, UnaryOperator<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyInt(before.applyInt(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(int)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Integer x) {
                return applyInt((int) x);
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @apiNote Semantically the same as calling {@link #applyInt(int)}
             */
            @Override
            default int applyAsInt(int x) {
                return applyInt((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfFloat extends ToInt<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a funInt using {@codLong this} and the argument. The cint consists
             * of calling {@link #applyDouble(double)} and then using it's {@lint double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyInt(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyInt(before.applyFloat(x));
            }


            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(float)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Float x) {
                return applyInt((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfChar extends ToInt<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyInt(before.applyChar(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(char)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Character x) {
                return applyInt((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfShort extends ToInt<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a funInt using {@codLong this} and the argument. The cint consists
             * of calling {@link #applyDouble(double)} and then using it's {@lint double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@int long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyInt(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyInt(before.applyShort(x));
            }


            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(short)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Short x) {
                return applyInt((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfByte extends ToInt<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyInt(before.applyByte(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(byte)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Byte x) {
                return applyInt((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns an
         * {@code int}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToInt<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code int} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns an {@code int}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code int} result of applying the argument
             */
            int applyInt(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(int) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenDouble(ToDouble)}
             * @see ToInt#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfInt after) {
                return x -> after.applyDouble(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(int) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenLong(ToLong)}
             * @see ToInt#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfInt after) {
                return x -> after.applyLong(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {int double} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(int) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenInt(ToInt)}
             * @see ToInt#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfInt after) {
                return x -> after.applyInt(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(int) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenFloat(ToFloat)}
             * @see ToInt#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfInt after) {
                return x -> after.applyFloat(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@cint double} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(int) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenChar(ToChar)}
             * @see ToInt#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfInt after) {
                return x -> after.applyChar(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codint double} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(int) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenShort(ToShort)}
             * @see ToInt#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfInt after) {
                return x -> after.applyShort(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applInt(double)} and then using it's {@codeint} return
             * value as the argument for {@link ToBoolean.OfDouble#applyByte(int) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenByte(ToByte)}
             * @see ToInt#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfInt after) {
                return x -> after.applyByte(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyInt(double)} and then using it's {@code int} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(int) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code int} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToInt#andThenBoolean(ToBoolean)}
             * @see ToInt#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfInt after) {
                return x -> after.applyBoolean(applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToInt#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToInt.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeLong(PrimitiveFunction.OfLong)}
             * @see ToInt#composeLong(PrimitiveFunction.OfLong)
             */
            default ToInt.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeInt(PrimitiveFunction.OfInt)}
             * @see ToInt#composeInt(PrimitiveFunction.OfInt)
             */
            default ToInt.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToInt#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToInt.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeChar(PrimitiveFunction.OfChar)}
             * @see ToInt#composeChar(PrimitiveFunction.OfChar)
             */
            default ToInt.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeShort(PrimitiveFunction.OfShort)}
             * @see ToInt#composeShort(PrimitiveFunction.OfShort)
             */
            default ToInt.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeByte(PrimitiveFunction.OfByte)}
             * @see ToInt#composeByte(PrimitiveFunction.OfByte)
             */
            default ToInt.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns an {@code int} result.
             * @apiNote This is the most specialised version of
             * {@link ToInt#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToInt#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToInt.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyInt(before.applyBoolean(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyInt(boolean)}, and returns that boxed result.
             */
            @Override
            default int applyInt(java.lang.Boolean x) {
                return applyInt((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code float} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyFloat} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code float} functions and functions.
     * <li>cover all areas where primitive {@code float} would be needed when
     * working with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Float}) when the primitive {@code float}
     * was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToFloat.OfInt f = Float::intBitsToFloat;
     * PrimitiveConsumer.OfFloat c = System.out::println;
     * c.acceptFloat(f.applyFloat(0xF7B04AC7));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code float} and taking an {@code int}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyFloat} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Float} to the
     *           primitive
     *           {@code float} as it's return type.
     */
    @FunctionalInterface
    interface ToFloat<OF> extends PrimitiveFunction<java.lang.Float, OF> {
        /**
         * Applies this function to the given arguments, returning a {@code float}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a {@code float}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code float} result of applying both arguments
         */
        float applyFloat(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Float> after) {
            return x -> after.applyDouble(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Float> after) {
            return x -> after.applyLong(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Float> after) {
            return x -> after.applyInt(applyFloat(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Float> after) {
            return x -> after.applyFloat(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Float> after) {
            return x -> after.applyChar(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Float> after) {
            return x -> after.applyShort(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Float> after) {
            return x -> after.applyByte(applyFloat(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyFloat(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Float} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Float> after) {
            return x -> after.applyBoolean(applyFloat(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToFloat<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToFloat<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToFloat<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToFloat<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToFloat<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToFloat<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyFloat(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code float}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToFloat<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyFloat(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyFloat}, and returns that boxed result.
         */
        @Override
        default java.lang.Float apply(OF x) {
            return applyFloat(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfDouble extends ToFloat<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyFloat(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyFloat(before.applyDouble(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(double)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Double x) {
                return applyFloat((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfLong extends ToFloat<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyFloat(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyFloat(before.applyLong(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(float)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Long x) {
                return applyFloat((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfInt extends ToFloat<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyFloat(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyFloat(before.applyInt(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(int)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Integer x) {
                return applyFloat((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfFloat extends ToFloat<java.lang.Float>, UnaryOperator<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a funInt usingFloatcodLong this} and the argument. The float consists
             * of calling {@link #applyDouble(double)} and then using float's {@lint double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyFloat(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(float)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Float x) {
                return applyFloat((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfChar extends ToFloat<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyFloat(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyFloat(before.applyChar(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(char)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Character x) {
                return applyFloat((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfShort extends ToFloat<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a funInt usingFloatcodLong this} and the argument. The float consists
             * of calling {@link #applyDouble(double)} and then using float's {@lint double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@float long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyFloat(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(short)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Short x) {
                return applyFloat((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfByte extends ToFloat<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToByte.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyFloat(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyFloat(before.applyByte(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(byte)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Byte x) {
                return applyFloat((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code float}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToFloat<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code float}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code float}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code float} result of applying the argument
             */
            float applyFloat(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToDouble.OfDouble#applyDouble(float) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenDouble(ToDouble)}
             * @see ToFloat#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfFloat after) {
                return x -> after.applyDouble(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToLong.OfDouble#applyLong(float) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenLong(ToLong)}
             * @see ToFloat#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfFloat after) {
                return x -> after.applyLong(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {int float} return
             * value as the argument for {@link ToInt.OfDouble#applyInt(float) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenInt(ToInt)}
             * @see ToFloat#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfFloat after) {
                return x -> after.applyInt(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToFloat.OfDouble#applyFloat(float) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenFloat(ToFloat)}
             * @see ToFloat#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfFloat after) {
                return x -> after.applyFloat(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@cint float} return
             * value as the argument for {@link ToChar.OfDouble#applyChar(float) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenChar(ToChar)}
             * @see ToFloat#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfFloat after) {
                return x -> after.applyChar(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@codint float} return
             * value as the argument for {@link ToShort.OfDouble#applyShort(float) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenShort(ToShort)}
             * @see ToFloat#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfFloat after) {
                return x -> after.applyShort(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applFloat(double)} and then using it's {@float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyByte(float) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenByte(ToByte)}
             * @see ToFloat#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfFloat after) {
                return x -> after.applyByte(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyFloat(double)} and then using it's {@code float} return
             * value as the argument for {@link ToBoolean.OfDouble#applyBoolean(float) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code float} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToFloat#andThenBoolean(ToBoolean)}
             * @see ToFloat#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfFloat after) {
                return x -> after.applyBoolean(applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToFloat#composeDouble(PrimitiveFunction.OfDouble)
             */
            default ToFloat.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeLong(PrimitiveFunction.OfLong)}
             * @see ToFloat#composeLong(PrimitiveFunction.OfLong)
             */
            default ToFloat.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeInt(PrimitiveFunction.OfInt)}
             * @see ToFloat#composeInt(PrimitiveFunction.OfInt)
             */
            default ToFloat.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToFloat#composeFloat(PrimitiveFunction.OfFloat)
             */
            default ToFloat.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeChar(PrimitiveFunction.OfChar)}
             * @see ToFloat#composeChar(PrimitiveFunction.OfChar)
             */
            default ToFloat.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeShort(PrimitiveFunction.OfShort)}
             * @see ToFloat#composeShort(PrimitiveFunction.OfShort)
             */
            default ToFloat.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeByte(PrimitiveFunction.OfByte)}
             * @see ToFloat#composeByte(PrimitiveFunction.OfByte)
             */
            default ToFloat.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyFloat(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns a {@code float} result.
             * @apiNote This is the most specialised version of
             * {@link ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToFloat#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToFloat.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyFloat(before.applyBoolean(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyFloat(boolean)}, and returns that boxed result.
             */
            @Override
            default float applyFloat(java.lang.Boolean x) {
                return applyFloat((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code char} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyChar} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code char} functions and functions.
     * <li>cover all areas where primitive {@code char} would be needed when working
     * with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Character}) when the primitive
     * {@code char} was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToChar.OfInt f = Char::highSurrogate;
     * PrimitiveConsumer.OfChar c = System.out::println;
     * c.acceptChar(f.applyChar(0xF7B0));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code char} and taking an {@code int}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyChar} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Character} to the
     *           primitive
     *           {@code char} as it's return type.
     */
    @FunctionalInterface
    interface ToChar<OF> extends PrimitiveFunction<java.lang.Character, OF> {
        /**
         * Applies this function to the given arguments, returning a {@code char}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a {@code char}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code char} result of applying both arguments
         */
        char applyChar(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Character> after) {
            return x -> after.applyDouble(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Character> after) {
            return x -> after.applyLong(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Character> after) {
            return x -> after.applyInt(applyChar(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Character> after) {
            return x -> after.applyFloat(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Character> after) {
            return x -> after.applyChar(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Character> after) {
            return x -> after.applyShort(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Character> after) {
            return x -> after.applyByte(applyChar(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyChar(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Char} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Character> after) {
            return x -> after.applyBoolean(applyChar(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToChar<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToChar<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToChar<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToChar<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToChar<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToChar<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyChar(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code char}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToChar<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyChar(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyChar}, and returns that boxed result.
         */
        @Override
        default java.lang.Character apply(OF x) {
            return applyChar(x);
        }

        @FunctionalInterface
        interface OfDouble extends ToChar<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyChar(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyChar(before.applyDouble(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(double)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Double x) {
                return applyChar((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfLong extends ToChar<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyChar(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyChar(before.applyLong(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(float)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Long x) {
                return applyChar((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfInt extends ToChar<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyChar(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyChar(before.applyInt(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(int)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Integer x) {
                return applyChar((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfFloat extends ToChar<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a funInt usingCharcodLong this} and the argument. The char consists
             * of calling {@link #applyDouble(double)} and then using it's Charchar double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyChar(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(float)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Float x) {
                return applyChar((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfChar extends ToChar<java.lang.Character>, UnaryOperator<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyChar(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyChar(before.applyChar(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(char)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Character x) {
                return applyChar((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfShort extends ToChar<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a funInt usingCharcodLong this} and the argument. The char consists
             * of calling {@link #applyDouble(double)} and then using it's Charchar double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@char long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyChar(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(short)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Short x) {
                return applyChar((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfByte extends ToChar<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToByte.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyChar(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyChar(before.applyByte(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(byte)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Byte x) {
                return applyChar((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code char}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToChar<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code char} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code char}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code char} result of applying the argument
             */
            char applyChar(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToDouble.OfChar#applyDouble(char) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenDouble(ToDouble)}
             * @see ToChar#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfChar after) {
                return x -> after.applyDouble(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToLong.OfChar#applyLong(char) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenLong(ToLong)}
             * @see ToChar#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfChar after) {
                return x -> after.applyLong(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {int char} return
             * value as the argument for {@link ToInt.OfChar#applyInt(char) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenInt(ToInt)}
             * @see ToChar#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfChar after) {
                return x -> after.applyInt(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToFloat.OfChar#applyFloat(char) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenFloat(ToFloat)}
             * @see ToChar#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfChar after) {
                return x -> after.applyFloat(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@cint char} return
             * value as the argument for {@link ToChar.OfChar#applyChar(char) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenChar(ToChar)}
             * @see ToChar#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfChar after) {
                return x -> after.applyChar(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@codint char} return
             * value as the argument for {@link ToShort.OfChar#applyShort(char) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenShort(ToShort)}
             * @see ToChar#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfChar after) {
                return x -> after.applyShort(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applChar(double)} and then using it's {@char} return
             * value as the argument for {@link ToBoolean.OfChar#applyByte(char) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenByte(ToByte)}
             * @see ToChar#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfChar after) {
                return x -> after.applyByte(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyChar(double)} and then using it's {@code char} return
             * value as the argument for {@link ToBoolean.OfChar#applyBoolean(char) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code char} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToChar#andThenBoolean(ToBoolean)}
             * @see ToChar#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfChar after) {
                return x -> after.applyBoolean(applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfDouble)}
             * @see ToChar#composeChar(PrimitiveFunction.OfDouble)
             */
            default ToChar.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfLong)}
             * @see ToChar#compoChar(PrimitiveFunction.OfLong)
             */
            default ToChar.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfInt)}
             * @see ToChar#compChar(PrimitiveFunction.OfInt)
             */
            default ToChar.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfFloat)}
             * @see ToChar#composChar(PrimitiveFunction.OfFloat)
             */
            default ToChar.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfChar)}
             * @see ToChar#compoChar(PrimitiveFunction.OfChar)
             */
            default ToChar.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfShort)}
             * @see ToChar#composChar(PrimitiveFunction.OfShort)
             */
            default ToChar.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfByte)}
             * @see ToChar#compoChar(PrimitiveFunction.OfByte)
             */
            default ToChar.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyChar(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns an {@code char} result.
             * @apiNote This is the most specialised version of
             * {@link ToChar#composeChar(PrimitiveFunction.OfBoolean)}
             * @see ToChar#composeBChar(PrimitiveFunction.OfBoolean)
             */
            default ToChar.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyChar(before.applyBoolean(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyChar(boolean)}, and returns that boxed result.
             */
            @Override
            default char applyChar(java.lang.Boolean x) {
                return applyChar((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code short} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyShort} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code short} functions and functions.
     * <li>cover all areas where primitive {@code short} would be needed when
     * working with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Short}) when the primitive {@code short}
     * was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToShort.OfChar f = c -> (short) Character.getNumericValue(c);
     * PrimitiveConsumer.OfShort c = System.out::println;
     * c.acceptShort(f.applyShort('c'));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code short} and taking a {@code char}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyShort} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Short} to the
     *           primitive
     *           {@code short} as it's return type.
     */
    @FunctionalInterface
    interface ToShort<OF> extends PrimitiveFunction<java.lang.Short, OF> {
        /**
         * Applies this function to the given arguments, returning a {@code short}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a {@code short}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code short} result of applying both arguments
         */
        short applyShort(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Short> after) {
            return x -> after.applyDouble(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Short> after) {
            return x -> after.applyLong(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Short> after) {
            return x -> after.applyInt(applyShort(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Short> after) {
            return x -> after.applyFloat(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Short> after) {
            return x -> after.applyChar(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Short> after) {
            return x -> after.applyShort(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Short> after) {
            return x -> after.applyByte(applyShort(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyShort(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Short} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Short> after) {
            return x -> after.applyBoolean(applyShort(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToShort<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToShort<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToShort<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToShort<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToShort<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToShort<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyShort(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code short}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToShort<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyShort(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyShort}, and returns that boxed result.
         */
        @Override
        default java.lang.Short apply(OF x) {
            return applyShort(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfDouble extends ToShort<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyShort(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyShort(before.applyDouble(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(double)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Double x) {
                return applyShort((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfLong extends ToShort<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyShort(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyShort(before.applyLong(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(float)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Long x) {
                return applyShort((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfInt extends ToShort<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyShort(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyShort(before.applyInt(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(int)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Integer x) {
                return applyShort((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfFloat extends ToShort<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a funInt usingShortcodLong this} and the argument. The short consists
             * of calling {@link #applyDouble(double)} and then using it's Shortshort double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyShort(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(float)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Float x) {
                return applyShort((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfChar extends ToShort<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyShort(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyShort(before.applyChar(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(char)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Character x) {
                return applyShort((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfShort extends ToShort<java.lang.Short>, UnaryOperator<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a funInt usingShortcodLong this} and the argument. The short consists
             * of calling {@link #applyDouble(double)} and then using it's Shortshort double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@short long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyShort(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(short)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Short x) {
                return applyShort((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfByte extends ToShort<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToByte.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyShort(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyShort(before.applyByte(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(byte)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Byte x) {
                return applyShort((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code short}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToShort<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code short}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code short}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code short} result of applying the argument
             */
            short applyShort(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToDouble.OfShort#applyDouble(short) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenDouble(ToDouble)}
             * @see ToShort#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfShort after) {
                return x -> after.applyDouble(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToLong.OfShort#applyLong(short) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenLong(ToLong)}
             * @see ToShort#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfShort after) {
                return x -> after.applyLong(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {int short} return
             * value as the argument for {@link ToInt.OfShort#applyInt(short) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenInt(ToInt)}
             * @see ToShort#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfShort after) {
                return x -> after.applyInt(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToFloat.OfShort#applyFloat(short) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenFloat(ToFloat)}
             * @see ToShort#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfShort after) {
                return x -> after.applyFloat(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@cint short} return
             * value as the argument for {@link ToChar.OfShort#applyChar(short) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenChar(ToChar)}
             * @see ToShort#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfShort after) {
                return x -> after.applyChar(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@codint short} return
             * value as the argument for {@link ToShort.OfShort#applyShort(short) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenShort(ToShort)}
             * @see ToShort#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfShort after) {
                return x -> after.applyShort(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applShort(double)} and then using it's {@short} return
             * value as the argument for {@link ToBoolean.OfShort#applyByte(short) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenByte(ToByte)}
             * @see ToShort#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfShort after) {
                return x -> after.applyByte(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyShort(double)} and then using it's {@code short} return
             * value as the argument for {@link ToBoolean.OfShort#applyBoolean(short) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code short} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToShort#andThenBoolean(ToBoolean)}
             * @see ToShort#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfShort after) {
                return x -> after.applyBoolean(applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeShort(PrimitiveFunction.OfDouble)}
             * @see ToShort#composeShort(PrimitiveFunction.OfDouble)
             */
            default ToShort.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfLong)}
             * @see ToShort#compoShort(PrimitiveFunction.OfLong)
             */
            default ToShort.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compShort(PrimitiveFunction.OfInt)}
             * @see ToShort#compShort(PrimitiveFunction.OfInt)
             */
            default ToShort.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfFloat)}
             * @see ToShort#composShort(PrimitiveFunction.OfFloat)
             */
            default ToShort.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfChar)}
             * @see ToShort#compoShort(PrimitiveFunction.OfChar)
             */
            default ToShort.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composShort(PrimitiveFunction.OfShort)}
             * @see ToShort#composShort(PrimitiveFunction.OfShort)
             */
            default ToShort.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#compoShort(PrimitiveFunction.OfByte)}
             * @see ToShort#compoShort(PrimitiveFunction.OfByte)
             */
            default ToShort.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyShort(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns an {@code short} result.
             * @apiNote This is the most specialised version of
             * {@link ToShort#composeBShort(PrimitiveFunction.OfBoolean)}
             * @see ToShort#composeBShort(PrimitiveFunction.OfBoolean)
             */
            default ToShort.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyShort(before.applyBoolean(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyShort(boolean)}, and returns that boxed result.
             */
            @Override
            default short applyShort(java.lang.Boolean x) {
                return applyShort((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code byte} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyByte} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code byte} functions and functions.
     * <li>cover all areas where primitive {@code byte} would be needed when working
     * with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Byte}) when the primitive {@code byte}
     * was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToByte.OfChar f = c -> Character.getDirectionality(c);
     * PrimitiveConsumer.OfByte c = System.out::println;
     * c.acceptByte(f.applyByte('\u4dd2'));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code byte} and taking a {@code char}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyByte} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Byte} to the
     *           primitive
     *           {@code byte} as it's return type.
     */
    @FunctionalInterface
    interface ToByte<OF> extends PrimitiveFunction<java.lang.Byte, OF> {
        /**
         * Applies this function to the given arguments, returning a {@code byte}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a {@code byte}.
         * It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code byte} result of applying both arguments
         */
        byte applyByte(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Byte> after) {
            return x -> after.applyDouble(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Byte> after) {
            return x -> after.applyLong(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Byte> after) {
            return x -> after.applyInt(applyByte(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Byte> after) {
            return x -> after.applyFloat(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Byte> after) {
            return x -> after.applyChar(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Byte> after) {
            return x -> after.applyShort(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Byte> after) {
            return x -> after.applyByte(applyByte(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyByte(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Byte} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Byte> after) {
            return x -> after.applyBoolean(applyByte(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToByte<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToByte<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToByte<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToByte<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToByte<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToByte<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyByte(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code byte}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToByte<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyByte(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyByte}, and returns that boxed result.
         */
        @Override
        default java.lang.Byte apply(OF x) {
            return applyByte(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfDouble extends ToByte<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyByte(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyByte(before.applyDouble(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(double)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Double x) {
                return applyByte((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfLong extends ToByte<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyByte(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyByte(before.applyLong(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(float)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Long x) {
                return applyByte((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfInt extends ToByte<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyByte(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyByte(before.applyInt(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(int)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Integer x) {
                return applyByte((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfFloat extends ToByte<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a funInt usingBytecodLong this} and the argument. The byte consists
             * of calling {@link #applyDouble(double)} and then using it's Bytebyte double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyByte(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(float)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Float x) {
                return applyByte((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfChar extends ToByte<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyByte(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyByte(before.applyChar(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(char)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Character x) {
                return applyByte((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfShort extends ToByte<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a funInt usingBytecodLong this} and the argument. The byte consists
             * of calling {@link #applyDouble(double)} and then using it's Bytebyte double} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@byte long} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyByte(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(short)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Short x) {
                return applyByte((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfByte extends ToByte<java.lang.Byte>, UnaryOperator<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToByte.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyByte(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyByte(before.applyByte(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(byte)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Byte x) {
                return applyByte((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code byte}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToByte<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code byte} result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a {@code byte}.
             * It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code byte} result of applying the argument
             */
            byte applyByte(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToDouble.OfByte#applyDouble(byte) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenDouble(ToDouble)}
             * @see ToByte#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfByte after) {
                return x -> after.applyDouble(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToLong.OfByte#applyLong(byte) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenLong(ToLong)}
             * @see ToByte#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfByte after) {
                return x -> after.applyLong(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {int byte} return
             * value as the argument for {@link ToInt.OfByte#applyInt(byte) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenInt(ToInt)}
             * @see ToByte#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfByte after) {
                return x -> after.applyInt(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToFloat.OfByte#applyFloat(byte) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenFloat(ToFloat)}
             * @see ToByte#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfByte after) {
                return x -> after.applyFloat(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@cint byte} return
             * value as the argument for {@link ToChar.OfByte#applyChar(byte) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenChar(ToChar)}
             * @see ToByte#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfByte after) {
                return x -> after.applyChar(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@codint byte} return
             * value as the argument for {@link ToShort.OfByte#applyShort(byte) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenShort(ToShort)}
             * @see ToByte#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfByte after) {
                return x -> after.applyShort(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applByte(double)} and then using it's {@byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyByte(byte) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenByte(ToByte)}
             * @see ToByte#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfByte after) {
                return x -> after.applyByte(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyByte(double)} and then using it's {@code byte} return
             * value as the argument for {@link ToBoolean.OfByte#applyBoolean(byte) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code byte} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToByte#andThenBoolean(ToBoolean)}
             * @see ToByte#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfByte after) {
                return x -> after.applyBoolean(applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeByte(PrimitiveFunction.OfDouble)}
             * @see ToByte#composeByte(PrimitiveFunction.OfDouble)
             */
            default ToByte.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfLong)}
             * @see ToByte#compoByte(PrimitiveFunction.OfLong)
             */
            default ToByte.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compByte(PrimitiveFunction.OfInt)}
             * @see ToByte#compByte(PrimitiveFunction.OfInt)
             */
            default ToByte.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfFloat)}
             * @see ToByte#composByte(PrimitiveFunction.OfFloat)
             */
            default ToByte.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfChar)}
             * @see ToByte#compoByte(PrimitiveFunction.OfChar)
             */
            default ToByte.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composByte(PrimitiveFunction.OfShort)}
             * @see ToByte#composByte(PrimitiveFunction.OfShort)
             */
            default ToByte.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#compoByte(PrimitiveFunction.OfByte)}
             * @see ToByte#compoByte(PrimitiveFunction.OfByte)
             */
            default ToByte.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyByte(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns an {@code byte} result.
             * @apiNote This is the most specialised version of
             * {@link ToByte#composeBByte(PrimitiveFunction.OfBoolean)}
             * @see ToByte#composeBByte(PrimitiveFunction.OfBoolean)
             */
            default ToByte.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyByte(before.applyBoolean(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyByte(boolean)}, and returns that boxed result.
             */
            @Override
            default byte applyByte(java.lang.Boolean x) {
                return applyByte((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that returns a {@code boolean} as a result. It includes a
     * generic implementation of {@link #apply}
     * and a more specialised implementation of {@link #applyBoolean} whereby the
     * latter gets more specialised implementations with
     * the nested sub-interfaces.
     * <p>
     * The purpose of this interface is to
     * <ol>
     * <li>use java's naming conventions to allow for familiarity when working with
     * {@code boolean} functions and functions.
     * <li>cover all areas where primitive {@code boolean} would be needed when
     * working with {@code Function}s to prevent programmers from deferring to
     * the boxed version ({@code java.lang.Boolean}) when the primitive
     * {@code boolean} was actually the required type, to avoid the performance
     * penalty of auto-boxing. For example:
     * 
     * <pre>{@code
     * PrimitiveFunction.ToBoolean.OfChar f = Character::isAlphabetic;
     * PrimitiveConsumer.OfBoolean c = System.out::println;
     * c.acceptBoolean(f.applyBoolean('c'));
     * }</pre>
     * 
     * The above has no JDK equivalent that extends the {@code Function} interface
     * to provide for returning a {@code boolean} and taking a {@code char}.
     * Hence all primitives are covered in the subsequent nested sub-interfaces.
     * </li>
     * </ol>
     * 
     * @param <OF> the type of argument of {@link #apply}
     * @implNote It is recommended that {@link #applyBoolean} be used instead of
     *           {@link #apply} as the former is a specialised version of the latter
     *           and is a first class implementation, but the latter is composed by
     *           calling the former and casting {@code java.lang.Boolean} to the
     *           primitive
     *           {@code boolean} as it's return type.
     */
    @FunctionalInterface
    interface ToBoolean<OF> extends PrimitiveFunction<java.lang.Boolean, OF> {
        /**
         * Applies this function to the given arguments, returning a {@code boolean}
         * result.
         * <p>
         * This is a specialised version of {@link #apply} that returns a
         * {@code boolean}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a {@code boolean} result of applying both arguments
         */
        boolean applyBoolean(OF x);

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyDouble(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code double}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code double} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToDouble<OF> andThenDouble(ToDouble<? super java.lang.Boolean> after) {
            return x -> after.applyDouble(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyLong(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code long}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code long} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToLong<OF> andThenLong(ToLong<? super java.lang.Boolean> after) {
            return x -> after.applyLong(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyInt(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code int}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code int} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToInt<OF> andThenInt(ToInt<? super java.lang.Boolean> after) {
            return x -> after.applyInt(applyBoolean(x));
        }
        
        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyFloat(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code float}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code float} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToFloat<OF> andThenFloat(ToFloat<? super java.lang.Boolean> after) {
            return x -> after.applyFloat(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyChar(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code char}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code char} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToChar<OF> andThenChar(ToChar<? super java.lang.Boolean> after) {
            return x -> after.applyChar(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyShort(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code short}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code short} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToShort<OF> andThenShort(ToShort<? super java.lang.Boolean> after) {
            return x -> after.applyShort(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToByte#applyByte(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code byte}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code byte} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToByte<OF> andThenByte(ToByte<? super java.lang.Boolean> after) {
            return x -> after.applyByte(applyBoolean(x));
        }

        /**
         * Composes a function from {@code this} and the argument. The composed
         * function consists of calling {@link #applyBoolean(Object)}, passing an
         * object of type {@code <OF>} to it as argument. The result of the previous
         * operation is used as the argument for {@link PrimitiveFunction.ToBoolean#applyBoolean(Object)},
         * whose return value is the return value of the returned function.
         * @param after a function that accepts a {@code java.lang.Boolean} as an argument
         * and returns a {@code boolean}.
         * @return a function that receives an argument of type {@code <T>} and
         * returns a {@code boolean} value
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<OF> andThenBoolean(ToBoolean<? super java.lang.Boolean> after) {
            return x -> after.applyBoolean(applyBoolean(x));
        }

        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Double} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Double} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenDouble(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenDouble(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Double> composeDouble(PrimitiveFunction.OfDouble<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Long} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Long} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenLong(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenLong(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Long> composeLong(PrimitiveFunction.OfLong<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Integer} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Integer} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenInt(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenInt(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Integer> composeInt(PrimitiveFunction.OfInt<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Float} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Float} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenFloat(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenFloat(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Float> composeFloat(PrimitiveFunction.OfFloat<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Character} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Character} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenChar(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenChar(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Character> composeChar(PrimitiveFunction.OfChar<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Short} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Short} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenShort(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenShort(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Short> composeShort(PrimitiveFunction.OfShort<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code java.lang.Byte} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Byte} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenByte(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenByte(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Byte> composeByte(PrimitiveFunction.OfByte<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }
        /**
         * Performs function composition of {@code this} and the argument. The result of
         * {@code before} is used as the argument for {@link #applyBoolean(Object)}.
         * @param before a function that takes in a {@code boolean} as an argument and returns
         * an object of type {@code <OF>}
         * @return a function that takes in a {@code java.lang.Boolean} as an argument and returns a {@code boolean}
         * @apiNote This is a specialised form of {@link PrimitiveFunction#andThenBoolean(PrimitiveFunction)}
         * @see PrimitiveFunction#andThenBoolean(PrimitiveFunction)
         */
        default ToBoolean<java.lang.Boolean> composeBoolean(PrimitiveFunction.OfBoolean<? extends OF> before) {
            return x -> applyBoolean(before.apply(x));
        }

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #applyBoolean}, and returns that boxed result.
         */
        @Override
        default java.lang.Boolean apply(OF x) {
            return applyBoolean(x);
        }

        /**
         * A {@code Function} that takes in a {@code double} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfDouble extends ToBoolean<java.lang.Double> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(double x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code double} value
             * @return a function that takes in a {@code double} and returns a {@code double} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfDouble andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.applyLong}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code long} value
             * @return a function that takes in a {@code double} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfDouble andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code int} value
             * @return a function that takes in a {@code double} and returns a {@code int} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfDouble andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code float} value
             * @return a function that takes in a {@code double} and returns a {@code float} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfDouble andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code char} value
             * @return a function that takes in a {@code double} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfDouble andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code short} value
             * @return a function that takes in a {@code double} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfDouble andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code byte} value
             * @return a function that takes in a {@code double} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfDouble andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code double} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfDouble andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToDouble.OfDouble before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToDouble.OfLong before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToDouble.OfInt before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToDouble.OfFloat before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToDouble.OfChar before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToDouble.OfShort before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToDouble.OfByte before) {
                return x -> applyBoolean(before.applyDouble(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code double}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToDouble.OfBoolean before) {
                return x -> applyBoolean(before.applyDouble(x));
            }
            /**
             * {@inheritDoc}
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(double)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Double x) {
                return applyBoolean((double) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code long} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfLong extends ToBoolean<java.lang.Long> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(long x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@double int} value
             * @return a function that takes in a {@code long} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfLong andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code long} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfLong andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte int} value
             * @return a function that takes in a {@code long} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfLong andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code long} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfLong andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@char boolean} value
             * @return a function that takes in a {@code long} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfLong andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@short boolean} value
             * @return a function that takes in a {@code long} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfLong andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code long} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfLong andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code long} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfLong andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToLong.OfDouble before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToLong.OfLong before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToLong.OfInt before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToLong.OfFloat before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToLong.OfChar before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToLong.OfShort before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToLong.OfByte before) {
                return x -> applyBoolean(before.applyLong(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code long}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToLong.OfBoolean before) {
                return x -> applyBoolean(before.applyLong(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(float)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Long x) {
                return applyBoolean((long) x);
            }

        }

        /**
         * A {@code Function} that takes in an {@code int} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfInt extends ToBoolean<java.lang.Integer> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(int x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@double int} value
             * @return a function that takes in a {@code int} and returns a {@code double} intalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfInt andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@longe int} value
             * @return a function that takes in a {@code int} and returns a {@code long} intalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfInt andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@cobyte int} value
             * @return a function that takes in a {@code int} and returns a {@code byte} intalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfInt andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyByFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@cobyte floatan} value
             * @return a function that takes in a {@code int} and returns a {@code byte} floatalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfInt andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@char boolean} value
             * @return a function that takes in a {@code int} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfInt andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@short boolean} value
             * @return a function that takes in a {@code int} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfInt andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@cobyte boolean} value
             * @return a function that takes in a {@code int} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfInt andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code int} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfInt andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToInt.OfDouble before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToInt.OfLong before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToInt.OfInt before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToInt.OfFloat before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToInt.OfChar before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToInt.OfShort before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToInt.OfByte before) {
                return x -> applyBoolean(before.applyInt(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code int}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToInt.OfBoolean before) {
                return x -> applyBoolean(before.applyInt(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(int)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Integer x) {
                return applyBoolean((int) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code float} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfFloat extends ToBoolean<java.lang.Float> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(float x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@double} int
             * @return a function that takes in a {@code float} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfFloat andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@longe} int
             * @return a function that takes in a {@code float} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfFloat andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} int
             * @return a function that takes in a {@code float} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfFloat andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a funInt usingBooleancodLong this} and the argument. The boolean consists
             * of calling {@link #applyDouble(double)} and then using it's Booleanlint boolean} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code float} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfFloat andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@char} value
             * @return a function that takes in a {@code float} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfFloat andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@short} value
             * @return a function that takes in a {@code float} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfFloat andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} value
             * @return a function that takes in a {@code float} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfFloat andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code float} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfFloat andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToFloat.OfDouble before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToFloat.OfLong before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToFloat.OfInt before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToFloat.OfFloat before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToFloat.OfChar before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToFloat.OfShort before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToFloat.OfByte before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code float}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToFloat.OfBoolean before) {
                return x -> applyBoolean(before.applyFloat(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(float)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Float x) {
                return applyBoolean((float) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code char} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfChar extends ToBoolean<java.lang.Character> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(char x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@double int} value
             * @return a function that takes in a {@code char} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfChar andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code char} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfChar andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte int} value
             * @return a function that takes in a {@code char} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfChar andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code char} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfChar andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@char boolean} value
             * @return a function that takes in a {@code char} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfChar andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@short boolean} value
             * @return a function that takes in a {@code char} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfChar andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code char} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfChar andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code char} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfChar andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToChar.OfDouble before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToChar.OfLong before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToChar.OfInt before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToChar.OfFloat before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToChar.OfChar before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToChar.OfShort before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToChar.OfByte before) {
                return x -> applyBoolean(before.applyChar(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code char}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToChar.OfBoolean before) {
                return x -> applyBoolean(before.applyChar(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(char)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Character x) {
                return applyBoolean((char) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code short} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfShort extends ToBoolean<java.lang.Short> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(short x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@double} int
             * @return a function that takes in a {@code short} and returns a {@double byteint value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfShort andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@longe} int
             * @return a function that takes in a {@code short} and returns a {@code long value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfShort andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} int
             * @return a function that takes in a {@code short} and returns a {@code byteint value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfShort andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a funInt usingBooleancodLong this} and the argument. The boolean consists
             * of calling {@link #applyDouble(double)} and then using it's Booleanlint boolean} return
             * value as the argument for {@link ToByte.OfFloat#applyByte(douFloat after.applyByte}Float* whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} floatlue
             * @return a function that takes in a {@code short} and returns a {@code bytefloat value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfShort andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@char} value
             * @return a function that takes in a {@code short} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfShort andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@short} value
             * @return a function that takes in a {@code short} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfShort andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@int boolean} and returns a {@codebyte} value
             * @return a function that takes in a {@code short} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfShort andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code short} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfShort andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToShort.OfDouble before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToShort.OfLong before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToShort.OfInt before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToShort.OfFloat before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToShort.OfChar before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToShort.OfShort before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToShort.OfByte before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code short}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToShort.OfBoolean before) {
                return x -> applyBoolean(before.applyShort(x));
            }

            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(short)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Short x) {
                return applyBoolean((short) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code byte} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfByte extends ToBoolean<java.lang.Byte> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(byte x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.DoublelyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@double int} value
             * @return a function that takes in a {@code byte} and returns a {@double byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfByte andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.Long}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@longodbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@long byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfByte andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte int} value
             * @return a function that takes in a {@code byte} and returns a {@code byteintvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfByte andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyBytFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte floatlean} value
             * @return a function that takes in a {@code byte} and returns a {@code bytefloatvalue
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfByte andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.Char}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@char boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfByte andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.Short}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@short boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfByte andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToByte.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@codbyte boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfByte andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code byte} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfByte andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToByte.OfDouble before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToByte.OfLong before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToByte.OfInt before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToByte.OfFloat before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToByte.OfChar before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToByte.OfShort before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToByte.OfByte before) {
                return x -> applyBoolean(before.applyByte(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code byte}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToByte.OfBoolean before) {
                return x -> applyBoolean(before.applyByte(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(byte)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Byte x) {
                return applyBoolean((byte) x);
            }

        }

        /**
         * A {@code Function} that takes in a {@code boolean} value and returns a
         * {@code boolean}.
         */
        @FunctionalInterface
        interface OfBoolean extends ToBoolean<java.lang.Boolean>, UnaryOperator<java.lang.Boolean> {
            /**
             * Applies this function to the given argument, returning a {@code boolean}
             * result.
             * <p>
             * This is a specialised version of {@link #apply} that returns a
             * {@code boolean}. It is recommended that this method be
             * used instead of {@link #apply} as this is the first class implementation of
             * this interface.
             * 
             * @param x the first argument
             * @return a {@code boolean} result of applying the argument
             */
            boolean applyBoolean(boolean x);
            
            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToDouble.OfBoolean#applyDouble(boolean) after.applyDouble}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@double int} value
             * @return a function that takes in a {@code boolean} and returns a {@double inte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenDouble(ToDouble)}
             * @see ToBoolean#andThenDouble(ToDouble)
             */
            default ToDouble.OfBoolean andThenDouble(ToDouble.OfBoolean after) {
                return x -> after.applyDouble(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToLong.OfBoolean#applyLong(boolean) after.applyLong
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code intlong value
             * @return a function that takes in a {@code boolean} and returns a {@code long} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenLong(ToLong)}
             * @see ToBoolean#andThenLong(ToLong)
             */
            default ToLong.OfBoolean andThenLong(ToLong.OfBoolean after) {
                return x -> after.applyLong(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {int boolean} return
             * value as the argument for {@link ToInt.OfBoolean#applyInt(boolean) after.applyInt}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code int} value
             * @return a function that takes in a {@code boolean} and returns a {@code inte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenInt(ToInt)}
             * @see ToBoolean#andThenInt(ToInt)
             */
            default ToInt.OfBoolean andThenInt(ToInt.OfBoolean after) {
                return x -> after.applyInt(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToFloat.OfBoolean#applyFloat(boolean) after.applyFloat}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code float} value
             * @return a function that takes in a {@code boolean} and returns a {@code floate} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenFloat(ToFloat)}
             * @see ToBoolean#andThenFloat(ToChar)
             */
            default ToFloat.OfBoolean andThenFloat(ToFloat.OfBoolean after) {
                return x -> after.applyFloat(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@cint boolean} return
             * value as the argument for {@link ToChar.OfBoolean#applyChar(boolean) after.applyChar}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code char} value
             * @return a function that takes in a {@code boolean} and returns a {@code char} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenChar(ToChar)}
             * @see ToBoolean#andThenChar(ToChar)
             */
            default ToChar.OfBoolean andThenChar(ToChar.OfBoolean after) {
                return x -> after.applyChar(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@codint boolean} return
             * value as the argument for {@link ToShort.OfBoolean#applyShort(boolean) after.applyShort}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code short} value
             * @return a function that takes in a {@code boolean} and returns a {@code short} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenShort(ToShort)}
             * @see ToBoolean#andThenShort(ToShort)
             */
            default ToShort.OfBoolean andThenShort(ToShort.OfBoolean after) {
                return x -> after.applyShort(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applBoolean(double)} and then using it's {@boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyByte(boolean) after.applyByte}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code bbyte} value
             * @return a function that takes in a {@code boolean} and returns a {@code byte} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenByte(ToByte)}
             * @see ToBoolean#andThenByte(ToByte)
             */
            default ToByte.OfBoolean andThenByte(ToByte.OfBoolean after) {
                return x -> after.applyByte(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument. The composition consists
             * of calling {@link #applyBoolean(double)} and then using it's {@code boolean} return
             * value as the argument for {@link ToBoolean.OfBoolean#applyBoolean(boolean) after.applyBoolean}
             * whose return value is returned.
             * @param after a function that takes a {@code boolean} and returns a {@code boolean} value
             * @return a function that takes in a {@code boolean} and returns a {@code boolean} value
             * @apiNote This is the most specialised version of {@link ToBoolean#andThenBoolean(ToBoolean)}
             * @see ToBoolean#andThenBoolean(ToBoolean)
             */
            default ToBoolean.OfBoolean andThenBoolean(ToBoolean.OfBoolean after) {
                return x -> after.applyBoolean(applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code double} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code double} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeDouble(PrimitiveFunction.OfDouble)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfDouble)
             */
            default ToBoolean.OfDouble composeDouble(ToBoolean.OfDouble before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code long} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code long} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeLong(PrimitiveFunction.OfLong)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfLong)
             */
            default ToBoolean.OfLong composeLong(ToBoolean.OfLong before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code int} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code int} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeInt(PrimitiveFunction.OfInt)}
             * @see ToBoolean#compBoolean(PrimitiveFunction.OfInt)
             */
            default ToBoolean.OfInt composeInt(ToBoolean.OfInt before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code float} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code float} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeFloat(PrimitiveFunction.OfFloat)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfFloat)
             */
            default ToBoolean.OfFloat composeFloat(ToBoolean.OfFloat before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code char} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code char} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeChar(PrimitiveFunction.OfChar)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfChar)
             */
            default ToBoolean.OfChar composeChar(ToBoolean.OfChar before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code short} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code short} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeShort(PrimitiveFunction.OfShort)}
             * @see ToBoolean#composBoolean(PrimitiveFunction.OfShort)
             */
            default ToBoolean.OfShort composeShort(ToBoolean.OfShort before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code byte} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code byte} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeByte(PrimitiveFunction.OfByte)}
             * @see ToBoolean#compoBoolean(PrimitiveFunction.OfByte)
             */
            default ToBoolean.OfByte composeByte(ToBoolean.OfByte before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }

            /**
             * Composes a function using {@code this} and the argument.
             * @param before a function that has a {@code boolean} parameter
             * and returns a {@code boolean}
             * @return a function that receives a {@code boolean} and
             * returns an {@code boolean} result.
             * @apiNote This is the most specialised version of
             * {@link ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)}
             * @see ToBoolean#composeBoolean(PrimitiveFunction.OfBoolean)
             */
            default ToBoolean.OfBoolean composeBoolean(ToBoolean.OfBoolean before) {
                return x -> applyBoolean(before.applyBoolean(x));
            }
            /**
             * {@inheritDoc}
             * 
             * @param x {@inheritDoc}
             * @return {@inheritDoc}
             * @implNote The default implementation boxes the result of calling
             *           {@link #applyBoolean(boolean)}, and returns that boxed result.
             */
            @Override
            default boolean applyBoolean(java.lang.Boolean x) {
                return applyBoolean((boolean) x);
            }

        }
    }

    /**
     * A {@code Function} that takes in a {@code double} value and returns a result
     * of type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfDouble<TO> extends PrimitiveFunction<TO, java.lang.Double>, DoubleFunction<TO> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        @Override
        TO apply(double x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(double)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Double x) {
            return apply((double) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code long} value and returns a result of
     * type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfLong<TO> extends PrimitiveFunction<TO, java.lang.Long>, LongFunction<TO> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        @Override
        TO apply(long x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(float)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Long x) {
            return apply((long) x);
        }

    }

    /**
     * A {@code Function} that takes in an {@code int} value and returns a result of
     * type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfInt<TO> extends PrimitiveFunction<TO, java.lang.Integer>, IntFunction<TO> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        @Override
        TO apply(int x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(int)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Integer x) {
            return apply((int) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code float} value and returns a result
     * of type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfFloat<TO> extends PrimitiveFunction<TO, java.lang.Float> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        TO apply(float x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(float)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Float x) {
            return apply((float) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code char} value and returns a result of
     * type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfChar<TO> extends PrimitiveFunction<TO, java.lang.Character> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        TO apply(char x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(char)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Character x) {
            return apply((char) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code short} value and returns a result
     * of type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfShort<TO> extends PrimitiveFunction<TO, java.lang.Short> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        TO apply(short x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(short)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Short x) {
            return apply((short) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code byte} value and returns a result of
     * type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfByte<TO> extends PrimitiveFunction<TO, java.lang.Byte> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        TO apply(byte x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(byte)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Byte x) {
            return apply((byte) x);
        }

    }

    /**
     * A {@code Function} that takes in a {@code boolean} value and returns a result
     * of type {@code <TO>}.
     */
    @FunctionalInterface
    interface OfBoolean<TO> extends PrimitiveFunction<TO, java.lang.Boolean> {
        /**
         * Applies this function to the given argument, returning a result of type
         * {@code <TO>}.
         * <p>
         * This is a specialised version of {@link #apply} that returns a result of type
         * {@code <TO>}. It is recommended that this method be
         * used instead of {@link #apply} as this is the first class implementation of
         * this interface.
         * 
         * @param x the first argument
         * @return a result of type {@code <TO>} of applying the argument
         */
        TO apply(boolean x);

        /**
         * {@inheritDoc}
         * 
         * @param x {@inheritDoc}
         * @return {@inheritDoc}
         * @implNote The default implementation boxes the result of calling
         *           {@link #apply(boolean)}, and returns that boxed result.
         */
        @Override
        default TO apply(java.lang.Boolean x) {
            return apply((boolean) x);
        }
    }

    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Double}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} if ths argument to this function and the return value
     * is {@code java.lang.Double}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Double}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Double}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Double, OF> andThenDouble(PrimitiveFunction<? extends java.lang.Double, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Long}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} is the argument to this function and the return value
     * is {@code java.lang.Long}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Long}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Long}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Long, OF> andThenLong(PrimitiveFunction<? extends java.lang.Long, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Integer}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} is the argument to this function and the return value
     * is {@code java.lang.Integer}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Integer}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Integer}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Integer, OF> andThenInt(PrimitiveFunction<? extends java.lang.Integer, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Float}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} if ths argument to this function and the return value
     * is {@code java.lang.Float}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Float}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Float}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Float, OF> andThenFloat(PrimitiveFunction<? extends java.lang.Float, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Character}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} is the argument to this function and the return value
     * is {@code java.lang.Character}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Character}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Character}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Character, OF> andThenChar(PrimitiveFunction<? extends java.lang.Character, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Short}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} if ths argument to this function and the return value
     * is {@code java.lang.Short}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Short}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Short}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Short, OF> andThenShort(PrimitiveFunction<? extends java.lang.Short, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Byte}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} is the argument to this function and the return value
     * is {@code java.lang.Byte}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Byte}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Byte}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Byte, OF> andThenByte(PrimitiveFunction<? extends java.lang.Byte, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} that takes in an object of type {@code <TO>}
     * and returns {@code java.lang.Boolean}.
     * @param after the function to be called after {@link #apply(Object) this.apply} has been called.
     * The return value of {@code this.apply} if ths argument to this function and the return value
     * is {@code java.lang.Boolean}.
     * @return a {@code PrimitiveFunction} of type {@code <OF>} and {@code java.lang.Boolean}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Boolean}
     * alternative to {@link #andThen(Function)}.
     * More specialized alternatives can be found at nested sub-interfaces.
     */
    default PrimitiveFunction<java.lang.Boolean, OF> andThenBoolean(PrimitiveFunction<? extends java.lang.Boolean, ? super TO> after) {
        return x -> after.apply(apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Double} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Double} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Double} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Double}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Double> composeDouble(PrimitiveFunction<? extends OF, ? super java.lang.Double> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Long} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Long} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Long} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Long}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Long> composeLong(PrimitiveFunction<? extends OF, ? super java.lang.Long> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Int} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Int} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Int} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Int}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Integer> composeInt(PrimitiveFunction<? extends OF, ? super java.lang.Integer> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Float} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Float} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Float} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Float}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Float> composeFloat(PrimitiveFunction<? extends OF, ? super java.lang.Float> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Char} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Char} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Char} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Char}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Character> composeChar(PrimitiveFunction<? extends OF, ? super java.lang.Character> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Short} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Short} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Short} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Short}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Short> composeShort(PrimitiveFunction<? extends OF, ? super java.lang.Short> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Byte} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Byte} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Byte} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Byte}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Byte> composeByte(PrimitiveFunction<? extends OF, ? super java.lang.Byte> before) {
        return x -> apply(before.apply(x));
    }
    /**
     * Composes a {@code PrimitiveFunction} of {@code java.lang.Boolean} and of type {@code <TO>}.
     * The composition is formed by applying the result of {@code before} to {@link #apply(Object)}.
     * @param before a {@code PrimitiveFunction} that takes in a {@code java.lang.Boolean} and
     * returns an object of type {@code <OF>}.
     * @return a {@code PrimitiveFunction} that takes in a {@code java.lang.Boolean} and returns
     * an object of type {@code <OF>}.
     * @apiNote This is part of a suite of functions that define the {@code java.lang.Boolean}
     * alternative to {@link #compose(Function)}. More specialized alternatives can be found
     * at the nested sub-interfaces.
     */
    default PrimitiveFunction<TO, java.lang.Boolean> composeBoolean(PrimitiveFunction<? extends OF, ? super java.lang.Boolean> before) {
        return x -> apply(before.apply(x));
    }
}